<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qianmeng&#39;s Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://qianmengchen.github.io/blog/"/>
  <updated>2016-04-11T22:16:02.000Z</updated>
  <id>http://qianmengchen.github.io/blog/</id>
  
  <author>
    <name>Qianmeng Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://qianmengchen.github.io/blog/2016/04/11/cs35L%200411/"/>
    <id>http://qianmengchen.github.io/blog/2016/04/11/cs35L 0411/</id>
    <published>2016-04-11T21:45:11.000Z</published>
    <updated>2016-04-11T22:16:02.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Modifying-program&quot;&gt;&lt;a href=&quot;#Modifying-program&quot; class=&quot;headerlink&quot; title=&quot;Modifying program&quot;&gt;&lt;/a&gt;Modifying program&lt;/h1&gt;&lt;p&gt;How to install software&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows&lt;ul&gt;
&lt;li&gt;installshield&lt;/li&gt;
&lt;li&gt;windows installer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux&lt;ul&gt;
&lt;li&gt;rpm (RedHat Linux) (.rpm)&lt;/li&gt;
&lt;li&gt;apt-get (Debian Linux, Ubuntu Linux) (.deb)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Decompressing Files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generally you would get Linux software in the tarball format (.tgz, .gz)&lt;/li&gt;
&lt;li&gt;Decompress file in current directory&lt;ul&gt;
&lt;li&gt;tar -xzvf filename.tar.gz&lt;ul&gt;
&lt;li&gt;Option -x: —extract&lt;/li&gt;
&lt;li&gt;Option -z: —gzip&lt;/li&gt;
&lt;li&gt;Option -v: —verbose&lt;/li&gt;
&lt;li&gt;Option -f: —file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compilation Process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++ preprocessor  —&amp;gt; expanded source code&lt;/li&gt;
&lt;li&gt;compiler —&amp;gt; .s&lt;/li&gt;
&lt;li&gt;assembler  —&amp;gt; .o&lt;/li&gt;
&lt;li&gt;linker —&amp;gt; executable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command-Line Compilation (example)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;shop.c&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#includes shoppingList.h and item.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;shoppingList.c&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#includes shoppingList.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;item.c&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;#includes item.h&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to compile?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc shoppingList.c item.c shop.c -o shop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What if…&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we change one of the header or source files&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rerun command to generate new executable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We only made a small change to item.c&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not efficient to recompile all the c files&lt;/li&gt;
&lt;li&gt;Solution: avoid waste by producing a separate object code file (.o) for each source file&lt;ul&gt;
&lt;li&gt;gcc -c item.c … (for each file)&lt;/li&gt;
&lt;li&gt;gcc item.o shoppingList.o shop.o -o shop (combine)&lt;/li&gt;
&lt;li&gt;Less work for compiler, saves time but more commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We change item.h&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We need to recompile all the files including item.h and header including item.h (here: item.c and shop.c)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make can automatically determine which files should be recompiled&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Makefile Example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Makefile - A Basic Example&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;all: shop # usually first&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;item.o: item.c item.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gcc -c item.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shoppingList.o: shoppingList.c item.h shoppingList.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gcc -c shippingList.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shop.o: shop.c item.c shoppingList.h&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gcc -c shop.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;shop: item.o shoppingList.o shop.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		gcc -o shop item.o shoppingList.o shop.o&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clean:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rm -f item.o shoppingList.o shop.o shop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Usage:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make item.o #apply rule 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make shop #apply rule 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#(Usually we make executable, because in this case it will check everything automatically)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Build Process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configure&lt;ul&gt;
&lt;li&gt;Script that checks details about the machine before instalation&lt;ul&gt;
&lt;li&gt;Dependency between packages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creates ‘Makefile’&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;make&lt;ul&gt;
&lt;li&gt;Requires ‘Makefile’ to run&lt;/li&gt;
&lt;li&gt;Compiles all the program code and creates executables in current temporary directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;make install&lt;ul&gt;
&lt;li&gt;make utility searches for a label named install within the Makefile, and executes only that section of it&lt;/li&gt;
&lt;li&gt;executables are copied into the final directories (system directories)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Modifying-program&quot;&gt;&lt;a href=&quot;#Modifying-program&quot; class=&quot;headerlink&quot; title=&quot;Modifying program&quot;&gt;&lt;/a&gt;Modifying program&lt;/h1&gt;&lt;p&gt;How to ins
    
    </summary>
    
    
      <category term="CS 35L" scheme="http://qianmengchen.github.io/blog/tags/CS-35L/"/>
    
  </entry>
  
  <entry>
    <title>P2POnSocialNorm_simulation1</title>
    <link href="http://qianmengchen.github.io/blog/2016/04/11/P2POnSocialNorm-simulation1/"/>
    <id>http://qianmengchen.github.io/blog/2016/04/11/P2POnSocialNorm-simulation1/</id>
    <published>2016-04-11T11:35:00.000Z</published>
    <updated>2016-04-11T21:52:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一个简单的模拟&quot;&gt;&lt;a href=&quot;#一个简单的模拟&quot; class=&quot;headerlink&quot; title=&quot;一个简单的模拟&quot;&gt;&lt;/a&gt;一个简单的模拟&lt;/h2&gt;&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;在一个DTN中，假设每个人都可以提供某种服务或者接受别人的服务。当俩节点相遇时，一方发出request，另一方可以选择serve或者不serve。现设计一种机制，使得网络中所有参与者都愿意在接收到他人请求时进行serve，避免出现free rider（即只获取服务不分享服务的人）。该机制如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个人都有一个全局可知的reputation。&lt;/li&gt;
&lt;li&gt;只有当双方的reputation都超过一个threshold时，双方才可以进行服务。&lt;/li&gt;
&lt;li&gt;如果出现了free rider情况，该free rider的reputation将被降为0。&lt;/li&gt;
&lt;li&gt;遵守规矩的人，reputation将随着时间增加，但reputation存在上限。&lt;/li&gt;
&lt;li&gt;要考虑因为网络连接错误的可能，即有一定概率服务者提供了服务而请求者没有收到。&lt;/li&gt;
&lt;li&gt;要考虑因为系统问题，有人被错误地判断为了free rider。&lt;/li&gt;
&lt;li&gt;当然，对他人服务是要有一定代价的，此外，人对未来可获取价值的期望的在意程度也不一样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此处的基础模拟暂时不考虑很多因素。首先是，假定网络中每个人都愿意进行serve，因此reputation被降的情况只因为系统错误。此外，尽管每个人相遇后进行serve的utility虽然会进行计算，但是不会实际对模拟结果造成影响。&lt;/p&gt;
&lt;p&gt;模拟程序python代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the reward: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	reward = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	reward = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set reward to default 10&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the cost: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cost = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cost = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set cost to default 2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the upper limit of reputation: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	L = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set L to default 20&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the threshold of reputation: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	h0 = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	h0 = int(L*&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set h0 to default &quot;&lt;/span&gt;+str(h0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the number of peers: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	num = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set num to default 20&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the probability of connectivity error: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	varepsilon = float(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	varepsilon = &lt;span class=&quot;number&quot;&gt;0.05&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set varepsilon to default 0.05&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the probability of false punishment: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alpha = float(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alpha = &lt;span class=&quot;number&quot;&gt;0.01&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set alpha to default 0.01&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the probability of encounter: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	encounterProb = float(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	encounterProb = &lt;span class=&quot;number&quot;&gt;0.02&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set encounterProb to default 0.02&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = raw_input(&lt;span class=&quot;string&quot;&gt;&quot;Please input the time duration of simulation: &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ticks = int(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; ValueError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ticks = &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;set ticks to default 3000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;peer&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.reputation = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		self.utility = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## set \lambda*b to 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;serve&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(server, client)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; server.reputation &amp;gt;= h0 &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; client.reputation &amp;gt;= h0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		server.utility = server.utility - cost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		random.seed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		success = random.random()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(success &amp;gt;= varepsilon):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			client.utility = client.utility + (reward - cost)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			client.utility = client.utility - cost&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allPeers = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(num):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	allPeers.append(peer())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plot = [[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ratio = [&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theory = [[&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)] &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;theory[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theory_active = [&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theory_active[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Theory_ratio = [&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(ticks+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	distribution = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; someone &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; allPeers:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		random.seed()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		prob = random.random()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; prob &amp;lt; encounterProb:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			objID = random.randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, num&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; allPeers[objID] &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; someone:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				objID = random.randint(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, num&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			serve(allPeers[objID], someone)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; someone.reputation &amp;lt; h0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			someone.reputation = someone.reputation + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fail = random.random()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fail &amp;lt; alpha:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				someone.reputation = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				someone.reputation = min(L, someone.reputation + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		distribution[someone.reputation] = distribution[someone.reputation] + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	activeNum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(h0, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		activeNum = activeNum + distribution[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	percent = int(t / float(ticks) * &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Progress %d %% \r&quot;&lt;/span&gt; %percent,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;#print distribution&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plot[x][t] = distribution[x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x == L:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theory[x][t] = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-alpha)*theory[x][t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-alpha)*theory[x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; x &amp;gt;= h0+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theory[x][t] = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-alpha)*theory[x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; x &amp;gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theory[x][t] = theory[x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				theory[x][t] = alpha*Theory_active[t&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt;= h0:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Theory_active[t] = Theory_active[t] + theory[x][t]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Theory_ratio[t] = Theory_active[t]/float(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ratio[t] = activeNum/float(num)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;\r&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Complete!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.figure(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.subplot(&lt;span class=&quot;number&quot;&gt;211&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Distribution&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	plt.plot(plot[x], label = str(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;Time&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.axis([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ticks, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;Number&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.subplot(&lt;span class=&quot;number&quot;&gt;212&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(ratio)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Ratio&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;Time&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;Active Ratio&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.axis([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ticks, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.figure(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.subplot(&lt;span class=&quot;number&quot;&gt;211&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Theoretical Distribution&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, L+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	plt.plot(theory[x], label = str(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;Time&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;Number&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.subplot(&lt;span class=&quot;number&quot;&gt;212&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.plot(Theory_ratio)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.title(&lt;span class=&quot;string&quot;&gt;&quot;Theoretical Ratio&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.xlabel(&lt;span class=&quot;string&quot;&gt;&#39;Time&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;Active Ratio&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.axis([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, ticks, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;plt.close(&lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;几组运行结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用全部default设定：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test3K_simu.png&quot; alt=&quot;test3K default simulation&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test3k_theo.png&quot; alt=&quot;test3K default theory&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仅将时间延长到10000&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test10k_simu.png&quot; alt=&quot;test10K default simulation&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test10k_theo.png&quot; alt=&quot;test10K default theory&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;时间仍然为10000，threshold调为15 (75% limit)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test10k_simu_15th.png&quot; alt=&quot;test10K threshold15 simulation&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test10k_theo_15th.png&quot; alt=&quot;test10K threshold15 theory&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将系统出错概率调整为0.0000001&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test3k_simu_e-7.png&quot; alt=&quot;test3K low-false-punishment simulation&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/images/test3k_theo_e-7.png&quot; alt=&quot;test3K low-false-punishment theory&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然理论上还要再分析一下之类的。。。但是现在懒癌犯了，下次再补吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个简单的模拟&quot;&gt;&lt;a href=&quot;#一个简单的模拟&quot; class=&quot;headerlink&quot; title=&quot;一个简单的模拟&quot;&gt;&lt;/a&gt;一个简单的模拟&lt;/h2&gt;&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;在一个DTN中，假设每个人都可以提供某种服务或者接受别人的服务。当俩节点相遇时
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>CS35L March 28th</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/CS35L-March-28th/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/CS35L-March-28th/</id>
    <published>2016-03-28T22:20:12.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;p&gt;Warning: DO NOT run commands like &lt;strong&gt;su&lt;/strong&gt; and &lt;strong&gt;sudo&lt;/strong&gt; on SEASNET&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GNU/Linux&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux is only the &lt;strong&gt;Kernel&lt;/strong&gt; of an operating system&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which Linux?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu Linux Distribution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most popular as of 2015 for personal use&lt;/li&gt;
&lt;li&gt;Frequently updated, fixed release cycle&lt;/li&gt;
&lt;li&gt;Simple installation and booting&lt;/li&gt;
&lt;li&gt;Nice set of pre-installed packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Connect to Linux server:&lt;/p&gt;
&lt;p&gt;ssh username@lnxsrv.seas.ucla.edu&lt;br&gt;password&lt;/p&gt;
&lt;h2 id=&quot;Files-and-Processes&quot;&gt;&lt;a href=&quot;#Files-and-Processes&quot; class=&quot;headerlink&quot; title=&quot;Files and Processes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Files_and_Processes&quot; title=&quot;Files and Processes&quot;&gt;&lt;/a&gt;Files and Processes&lt;/h2&gt;&lt;p&gt;Everything is either a &lt;strong&gt;process&lt;/strong&gt; or a &lt;strong&gt;file&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process: an executing program identified by PID&lt;/li&gt;
&lt;li&gt;File:&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-Basics-Moving-Around&quot;&gt;&lt;a href=&quot;#The-Basics-Moving-Around&quot; class=&quot;headerlink&quot; title=&quot;The Basics: Moving Around&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#The_Basics_3A_Moving_Around&quot; title=&quot;The Basics: Moving Around&quot;&gt;&lt;/a&gt;The Basics: Moving Around&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pwd: print working directory&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cd: change directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   ~: home
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;.: current directory&lt;/li&gt;
&lt;li&gt;/: root directory, or directory separator&lt;/li&gt;
&lt;li&gt;..: parent directory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-Basics-Dealing-with-Files&quot;&gt;&lt;a href=&quot;#The-Basics-Dealing-with-Files&quot; class=&quot;headerlink&quot; title=&quot;The Basics: Dealing with Files&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#The_Basics_3A_Dealing_with_Files&quot; title=&quot;The Basics: Dealing with Files&quot;&gt;&lt;/a&gt;The Basics: Dealing with Files&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;mv: move/rename a file&lt;/li&gt;
&lt;li&gt;cp: copy a file&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rm: remove a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   -r: remove directories and their contents recursively
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mkdir: make a directory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;rmdir: remove an empty directory&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ls: list contents of a directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   -a: list all files including hidden ones
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;-l: show long listing including permission info&lt;/li&gt;
&lt;li&gt;-d: list directories&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Linux-File-Permissions&quot;&gt;&lt;a href=&quot;#Linux-File-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Linux File Permissions&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Linux_File_Permissions&quot; title=&quot;Linux File Permissions&quot;&gt;&lt;/a&gt;Linux File Permissions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;chmod&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   read(r), write(w), executable(x)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;user, group, others&lt;/li&gt;
&lt;li&gt;-u: user, the owner of the file&lt;/li&gt;
&lt;li&gt;-g: group, users who are members of the file’s group&lt;/li&gt;
&lt;li&gt;-o: others, users who are not the owner of the file or members of the group&lt;/li&gt;
&lt;li&gt;-a: all, all three of the above, is the same as &lt;em&gt;-ugo&lt;/em&gt;*   ugo, each contains three bits: rwxrw—x(rwx for u, rw for g and x for o, also written as 111110001 or 761)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eg: chmod g+w README&lt;/strong&gt; add w permission for g&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eg: chmod o-r README&lt;/strong&gt; deprive r permission of o&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eg: chmod g=rx README&lt;/strong&gt; g has permissiin of r and x&lt;/li&gt;
&lt;li&gt;(= “chmod g - w README” &lt;strong&gt;and&lt;/strong&gt; “chmod g + x README” )&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-Basics-Changing-File-Attributes&quot;&gt;&lt;a href=&quot;#The-Basics-Changing-File-Attributes&quot; class=&quot;headerlink&quot; title=&quot;The Basics: Changing File Attributes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#The_Basics_3A_Changing_File_Attributes&quot; title=&quot;The Basics: Changing File Attributes&quot;&gt;&lt;/a&gt;The Basics: Changing File Attributes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ln: create a link&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   Hard links: point to physical data
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Soft links aka symbolic links (-s): point to a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;touch: update access &amp;amp; modification time to current time&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-Basics-find&quot;&gt;&lt;a href=&quot;#The-Basics-find&quot; class=&quot;headerlink&quot; title=&quot;The Basics: find&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#The_Basics_3A_find&quot; title=&quot;The Basics: find&quot;&gt;&lt;/a&gt;The Basics: find&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-type: type of a file(eg: directory, symbolic link)&lt;/li&gt;
&lt;li&gt;-perm: permission of a file&lt;/li&gt;
&lt;li&gt;-name: name of a file&lt;/li&gt;
&lt;li&gt;-user: owner of a file&lt;/li&gt;
&lt;li&gt;-maxdepth: how many levels to search&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;eg: find . -name hwk1 -type d -perm 761 -user qianmeng -maxdepth 1&lt;/strong&gt;(1 means current directory only)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;The-Basics-whereis&quot;&gt;&lt;a href=&quot;#The-Basics-whereis&quot; class=&quot;headerlink&quot; title=&quot;The Basics: whereis&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#The_Basics_3A_whereis&quot; title=&quot;The Basics: whereis&quot;&gt;&lt;/a&gt;The Basics: whereis&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;locate the binary file&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Manual-man&quot;&gt;&lt;a href=&quot;#Manual-man&quot; class=&quot;headerlink&quot; title=&quot;Manual(man)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Manual_28man_29&quot; title=&quot;Manual(man)&quot;&gt;&lt;/a&gt;Manual(man)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Extensive documentation that comes preinstalled with almost all substantial Unix and Unix-like operating systems&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*   read a manual page for a Linux command

    - man &amp;amp;lt;command_name&amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;man section command_name&lt;/li&gt;
&lt;li&gt;Hit &amp;quot;q&amp;quot; to get out of man page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Warning: DO NOT run commands like &lt;strong&gt;su&lt;/strong&gt; and &lt;strong&gt;sudo&lt;/strong&gt; on SEASNET&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GNU/Linux&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Linux is 
    
    </summary>
    
    
      <category term="CS 35L" scheme="http://qianmengchen.github.io/blog/tags/CS-35L/"/>
    
  </entry>
  
  <entry>
    <title>SEDUM</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/SEDUM/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/SEDUM/</id>
    <published>2016-03-28T22:18:45.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Exploiting-Social-Networks-in-Utility-Based-Distributed-Routing-for-DTNs&quot;&gt;&lt;a href=&quot;#Exploiting-Social-Networks-in-Utility-Based-Distributed-Routing-for-DTNs&quot; class=&quot;headerlink&quot; title=&quot;Exploiting Social Networks in Utility-Based Distributed Routing for DTNs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Exploiting_Social_Networks_in_Utility-Based_Distributed_Routing_for_DTNs&quot; title=&quot;Exploiting Social Networks in Utility-Based Distributed Routing for DTNs&quot;&gt;&lt;/a&gt;Exploiting Social Networks in Utility-Based Distributed Routing for DTNs&lt;/h2&gt;&lt;p&gt;The probability that at least one copy is sent to the destination node (P) is&lt;br&gt;$P = 1 - (1 - P_{(S,D)})^{N&lt;em&gt;C}$&lt;br&gt;Here $P&lt;/em&gt;{(S,D)}$ is the probability for message to be transmitted from the source to the destination, and each message can have $N_C$ copies.&lt;/p&gt;
&lt;p&gt;思路：&lt;br&gt;可证得：随着$N&lt;em&gt;C$的线性增长，overhead也线性增长，而delay只有negligible的减少。所以目标在提升$P&lt;/em&gt;{(S,D)}$ &lt;/p&gt;
&lt;p&gt;传递策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;传递的第一个阶段为Replicating Phase，消息从源头向相遇节点拷贝一定数量次。&lt;/li&gt;
&lt;li&gt;第二个阶段为Forwarding Phase，每个持有消息的节点总是将消息传递给Utility比自己高的节点。&lt;/li&gt;
&lt;li&gt;第三个阶段为Clearing Phase，在某消息完成传递之后，通知系统内其他节点丢弃该消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Utility定义：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义direct duration为$\hat{U}&lt;em&gt;{(i, j)} = (\sum\limits&lt;/em&gt;{k=1}^{K}t_{(i, j)(k)})/T$&lt;/li&gt;
&lt;li&gt;定义indirect duration为$\tilde{U}&lt;em&gt;{(i, j)} = \hat{U}&lt;/em&gt;{(i, k)}*\hat{U}_{(k, j)}$&lt;/li&gt;
&lt;li&gt;最终定义Utility为$U&lt;em&gt;{(i, j)} = max(\hat{U}&lt;/em&gt;{(i ,j)}, max(\tilde{U}_{(i, j)}))$&lt;/li&gt;
&lt;li&gt;此外，Utility需要每隔一段时间进行更新，获得新的Utility之后可以通过如下方式计算所采取的Utility：&lt;br&gt;$U&lt;em&gt;{(i, j)} = \gamma U&lt;/em&gt;{(i, j)} + (1 - \gamma)U&lt;em&gt;{(i, j)&lt;/em&gt;{old}}, \gamma \in (0, 1)$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;拷贝方式：&lt;br&gt;Optimal Tree Replication Algorithm:&lt;br&gt;如果每个初始节点允许存有的拷贝数为$N_C$，那么它的responsibility为$N_C－1$。每次遇到需要传递的节点，它将自己responsibility的一半传递给对方，自己继续发放剩下的部分。收到拷贝的节点重复该行为。该算法的时间复杂度和Binary Tree Replication Algorithm同为$log_2 N_C$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buffer Management:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关于消息在Buffer中的排列：&lt;br&gt;先分priority，priority高的先处理。同priority中根据接受时间递增排列，以保证停留时间长的先传递出去。&lt;/li&gt;
&lt;li&gt;如何处理Buffer Congestion：&lt;br&gt;消息源节点创建一定量其消息的core-replica然后传递给周围utility高的节点。core-replica不能被替换掉，但是可以把non-core-replica替换。对于同为non-core-replica的情况，utility高的消息可以把低的消息置换出来。&lt;/li&gt;
&lt;li&gt;如何删除意境传递成功的消息：&lt;br&gt;每个节点都会存一个deliveredMsgList，每当一个消息传递成功时，就更新这两个节点的list。每当两个节点相遇时，双方合并list，然后检查并删除成功的消息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;反思：&lt;br&gt;这是一篇讨论utility的文章，然而考虑到utility的实用性问题，暂抛开这个问题不谈。这篇文章对我而言有这样几个点值得注意，一个是optimal tree replication algorithm，一个是buffer management。&lt;/p&gt;
&lt;p&gt;replication这一块，之前一直默认的是binary tree replication是最优方案，甚至当时我看paper时，看到optimal tree的模式也以为和binary tree是一个东西只是换了个名字。然而这篇paper提出optimal tree replication效率比binary tree高，因为replication delay比较短（蛤？）从算法的角度来说这两种方法应该是一样的，所以并不理解这个效率的提高来自哪。&lt;/p&gt;
&lt;p&gt;buffer management的主要启发是core-replica的设置，这种方法使一个消息不会因为时间久远而灭绝在网络中。此外deliveredMsgList乍一看对效率提升有帮助，但是其实和普通的spread deleting message是一个效果。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Exploiting-Social-Networks-in-Utility-Based-Distributed-Routing-for-DTNs&quot;&gt;&lt;a href=&quot;#Exploiting-Social-Networks-in-Utility-Based-Dist
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>PeopleRank</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/PeopleRank/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/PeopleRank/</id>
    <published>2016-03-28T22:18:38.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Social-Opportunistic-Forwarding&quot;&gt;&lt;a href=&quot;#Social-Opportunistic-Forwarding&quot; class=&quot;headerlink&quot; title=&quot;Social Opportunistic Forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Social_Opportunistic_Forwarding&quot; title=&quot;Social Opportunistic Forwarding&quot;&gt;&lt;/a&gt;Social Opportunistic Forwarding&lt;/h1&gt;&lt;p&gt;&lt;em&gt;The idea&lt;/em&gt;&lt;br&gt;A node u forwards data to a node v that it meets if the rank of v is higher than the rank of u&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Centralized PeopleRank&lt;/em&gt;&lt;br&gt;We denote the social graph $G_S = (V_S, E_S)$ as a finite undirected graph with a vertex set V and an edge set $E_S$. An edge $(u, v) \in E_s$ if and only if there is a social relation between nodes u and v. Here we define a social relationship between two nodes u and v either (i) if they are declared friends, or (ii) if they are sharing k common interests.&lt;br&gt;$PeR(N&lt;em&gt;i) = (1-d) + d\sum\limits&lt;/em&gt;{N_j \in F(N_j)}\frac{PeR(N_j)}{\left|F(N_j)\right|}$&lt;br&gt;where $N_i$ is the node, $F(N_i)$ is the set of neighbors that links to $N_i$ and d is the damping factor which is defined as the probability at any encounter, that the social relation between the nodes helps to improve the rank of these nodes.&lt;br&gt;Algorithm: Distributed PeopleRank&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Require: |F(i) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PeR(i) = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; true do:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; contact &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; j:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; F(i):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            send(PeR(i), |F(i)|)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            receive(PeR(j), |F(j)|)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            update(PeR(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; buffer(i):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; PeR(j) &amp;gt;= PeR(i) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; j == destination(m):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                forward(m, j)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Social-Opportunistic-Forwarding&quot;&gt;&lt;a href=&quot;#Social-Opportunistic-Forwarding&quot; class=&quot;headerlink&quot; title=&quot;Social Opportunistic Forwardin
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Multi-hop vs Two-hop Routing Modeling &amp; Simulation in DTN</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/Multi-hop-vs-Two-hop-Routing-Modeling-Simulation-in-DTN/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/Multi-hop-vs-Two-hop-Routing-Modeling-Simulation-in-DTN/</id>
    <published>2016-03-28T22:18:33.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt;Important: &lt;/strong&gt; compute the average delay of one-copy-two-hop routing scheme:&lt;br&gt;$E(T&lt;em&gt;{s, d}) = \frac{1}{\lambda&lt;/em&gt;{s, d}+\sum&lt;em&gt;{i \in \Omega}\lambda&lt;/em&gt;{s, i}} + \sum&lt;em&gt;{i \in \Omega}\frac{\lambda&lt;/em&gt;{s, i}}{\lambda&lt;em&gt;{s, d} + \sum&lt;/em&gt;{i \in \Omega}\lambda&lt;em&gt;{s, i}}\frac{1}{\lambda&lt;/em&gt;{s, d} + \lambda&lt;em&gt;{i, d}} = \sum&lt;/em&gt;{i \in \Omega’}\frac{\lambda_{s, i}}{s\Omega’}\frac{1}{\mu_i}$&lt;/p&gt;
&lt;p&gt;$\Omega’ = \Omega \cup d$ is the set of nodes s may meet after t=0 and $\mu&lt;em&gt;d = \frac{1}{\lambda&lt;/em&gt;{s, d}}$, $\mu&lt;em&gt;i = \frac{1}{\lambda&lt;/em&gt;{s, d}+\lambda&lt;em&gt;{i, d}}$&lt;br&gt;It is clear that $E(T&lt;/em&gt;{s, d})$ is simply a weighted sum over $\mu&lt;em&gt;i$. To get the minimum $E(T&lt;/em&gt;{s, d})$ over all possible $\Omega$, we can use a simple algorithm as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sort $\mu_i$ in ascending order&lt;/li&gt;
&lt;li&gt;add $N&lt;em&gt;i$ to $\Omega‘$ if it decreases $E(T&lt;/em&gt;{s, d})$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note: &lt;/strong&gt;initially destination d has to be in the set.&lt;/p&gt;
&lt;p&gt;The average delivery delay of multi-copy-multi-hop routing scheme:&lt;br&gt;$E(T&lt;em&gt;{s, d}^n) = \frac{1}{\lambda&lt;/em&gt;{s, d}+\sum_{i \in \Omega&lt;em&gt;n}\lambda&lt;/em&gt;{s, i} }+ \sum_{i \in \Omega&lt;em&gt;n}\frac{\lambda&lt;/em&gt;{s, i}}{\lambda&lt;em&gt;{s, d}+\sum&lt;/em&gt;{i \in \Omega&lt;em&gt;n}\lambda&lt;/em&gt;{s, i}}E(min{T&lt;em&gt;{s, d}^{n-1}, T&lt;/em&gt;{i, d}^{n-1}})$&lt;/p&gt;
&lt;p&gt;The upper bound for $E(min{T&lt;em&gt;{s, d}^{n-1}, T&lt;/em&gt;{i, d}^{n-1}})$ is ${E(T&lt;em&gt;{s, d}^{n-1}), E(T&lt;/em&gt;{i, d}^{n-1})}$&lt;br&gt;To derive the forwarding sets for each state, we start from state 1 of s, which involves only its direct neighbors $N_1, \cdots, N_m$&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Important: &lt;/strong&gt; compute the average delay of one-copy-two-hop routing scheme:&lt;br&gt;$E(T&lt;em&gt;{s, d}) = \frac{1}{\lambda&lt;/em&gt;{s, 
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Spray and Wait</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/Spray-and-Wait/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/Spray-and-Wait/</id>
    <published>2016-03-28T22:18:28.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;An-Efficient-Routing-Scheme-for-Intermittently-Connected-Mobile-Networks&quot;&gt;&lt;a href=&quot;#An-Efficient-Routing-Scheme-for-Intermittently-Connected-Mobile-Networks&quot; class=&quot;headerlink&quot; title=&quot;An Efficient Routing Scheme for Intermittently Connected Mobile Networks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#An_Efficient_Routing_Scheme_for_Intermittently_Connected_Mobile_Networks&quot; title=&quot;An Efficient Routing Scheme for Intermittently Connected Mobile Networks&quot;&gt;&lt;/a&gt;An Efficient Routing Scheme for Intermittently Connected Mobile Networks&lt;/h1&gt;&lt;h2 id=&quot;General-spray-and-wait&quot;&gt;&lt;a href=&quot;#General-spray-and-wait&quot; class=&quot;headerlink&quot; title=&quot;General spray and wait:&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#General_spray_and_wait_3A&quot; title=&quot;General spray and wait:&quot;&gt;&lt;/a&gt;General spray and wait:&lt;/h2&gt;&lt;p&gt;Definition: &lt;em&gt;Spray and Wait routing consists of the following two phases:&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spray phase: for every message originating at a source node, L message copies are initially spread - forwarded by the source and possibly other nodes receiving a copy - to L distinct “relays”.&lt;/li&gt;
&lt;li&gt;Wait phase: if the destination is not found in the spraying phase, each of the L nodes carrying a message copy performs direct transmission.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Binary-spray-and-wait&quot;&gt;&lt;a href=&quot;#Binary-spray-and-wait&quot; class=&quot;headerlink&quot; title=&quot;Binary spray and wait:&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Binary_spray_and_wait_3A&quot; title=&quot;Binary spray and wait:&quot;&gt;&lt;/a&gt;Binary spray and wait:&lt;/h2&gt;&lt;p&gt;The source of a message initially starts with L copies; any node A that has n &amp;gt; 1 message copies (source or relay), and encounters another node B (with copies), hands over to B[n/2] and keeps [n/2] for itself; when it is left with only one copy, it switches to direct transmission.&lt;/p&gt;
&lt;p&gt;Binary Spray and Wait is optimal under IID condition (Independently and Identically Distributed).&lt;/p&gt;
&lt;p&gt;Theorem: When all nodes move in an IID manner, Binary Spray and Wait routing has the minimum expected delay among all spray and wait routing algorithms.&lt;/p&gt;
&lt;h2 id=&quot;Optimization-to-meet-performance-constraints&quot;&gt;&lt;a href=&quot;#Optimization-to-meet-performance-constraints&quot; class=&quot;headerlink&quot; title=&quot;Optimization to meet performance constraints&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Optimization_to_meet_performance_constraints&quot; title=&quot;Optimization to meet performance constraints&quot;&gt;&lt;/a&gt;Optimization to meet performance constraints&lt;/h2&gt;&lt;p&gt;Question: what does ICMN network stand for?&lt;br&gt;Lemma 1: Let M nodes with transmission range K perform independent random walks on a $\sqrt{N}*\sqrt{N}$ torus. Then:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The delay of Direct Transmission is exponentially distributed with the average&lt;br&gt;$ED_{dt} = 0.5N(0.34logN - \frac{2^{K+1}-K-2}{2^K -1})$&lt;/li&gt;
&lt;li&gt;The expected delay of the optimal algorithm is:&lt;br&gt;$ED&lt;em&gt;{opt} = \frac{H&lt;/em&gt;{M-1}}{M-1}ED_{dt}$&lt;br&gt;_where $H_n$ is the $n^{th}$ Harmonic Number, i.e, $H&lt;em&gt;n = \sum&lt;/em&gt;{i=1}^{n}\frac{1}{i} = \Theta(logn)$_&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lemma2:&lt;br&gt;&lt;em&gt;The expected delay of Spray and Wait, when L message copies are used, is upper-bounded by&lt;/em&gt;&lt;br&gt;$ED&lt;em&gt;{sw} \leq (H&lt;/em&gt;{M-1} - H&lt;em&gt;{M-L})ED&lt;/em&gt;{dt} + \frac{M-L}{M-1}\frac{ED_{dt}}{L}$&lt;br&gt;&lt;em&gt;The bound is tight when $L \ll M$&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Choose-L-to-Achieve-a-Required-Expected-Delay&quot;&gt;&lt;a href=&quot;#Choose-L-to-Achieve-a-Required-Expected-Delay&quot; class=&quot;headerlink&quot; title=&quot;Choose L to Achieve a Required Expected Delay&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Choose_L_to_Achieve_a_Required_Expected_Delay&quot; title=&quot;Choose L to Achieve a Required Expected Delay&quot;&gt;&lt;/a&gt;Choose L to Achieve a Required Expected Delay&lt;/h2&gt;&lt;p&gt;Lemma 3: The minimum number of copies $L&lt;em&gt;{min}$ needed for Spray and Wait to achieve an expected delay at most $aED&lt;/em&gt;{opt}$ is independent of the size of the network N and transmission range K, and only depends on a and the number of nodes M.&lt;/p&gt;
&lt;p&gt;Estimate for $L&lt;em&gt;{min}$:&lt;br&gt;$(H&lt;/em&gt;{M}^{3} - 1.2)L^3 + (H&lt;em&gt;{M}^{2} - \frac{\pi^2}{6})L^2 + (a + \frac{2M-1}{M(M-1)})L = \frac{M}{M-1}$ where $H&lt;/em&gt;{r}^{n} = \sum_{i=1}^{n}\frac{1}{i^r}$ is the $n^{th}$ Harmonic number of order r.&lt;/p&gt;
&lt;h3 id=&quot;Estimate-for-M-number-of-nodes&quot;&gt;&lt;a href=&quot;#Estimate-for-M-number-of-nodes&quot; class=&quot;headerlink&quot; title=&quot;Estimate for M (number of nodes)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Estimate_for_M__28number_of_nodes_29&quot; title=&quot;Estimate for M (number of nodes)&quot;&gt;&lt;/a&gt;Estimate for M (number of nodes)&lt;/h3&gt;&lt;p&gt;let $T_1$ be the time until a node encounters any other node&lt;br&gt;from Lemma 2, T1 is exponentially distributed with average $T&lt;em&gt;1 = \frac{ED&lt;/em&gt;{dt}}{M-1}$&lt;br&gt;let $T_2$ be the time until two different nodes are encountered, then the expected value of $T&lt;em&gt;2$ equals $ED&lt;/em&gt;{dt}(\frac{1}{M-1} + \frac{1}{M-2})$.&lt;br&gt;Then it is easy to get estimate M:&lt;br&gt;$\hat{M} = \frac{2T_2 - 3T_1}{T_2 - 2T_1}$&lt;/p&gt;
&lt;p&gt;$\hat{T&lt;em&gt;1} = \frac{1}{n}\sum&lt;/em&gt;{k=1}^{n}(\frac{M-c&lt;em&gt;k}{M-1})T&lt;/em&gt;{1,k}$&lt;br&gt;$\hat{T&lt;em&gt;2} = \frac{1}{n}\sum&lt;/em&gt;{k=1}^{n}[(\frac{M-c&lt;em&gt;{k-1}}{M-1})T&lt;/em&gt;{1,k-1} + (\frac{M-c&lt;em&gt;k}{M-2})T&lt;/em&gt;{1,k}]$&lt;br&gt;then replacing the $T_1$ and $T_2$ in the equation for $\hat{M}$, we get a current estimate of M.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;An-Efficient-Routing-Scheme-for-Intermittently-Connected-Mobile-Networks&quot;&gt;&lt;a href=&quot;#An-Efficient-Routing-Scheme-for-Intermittently-C
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>BUBBLE Rap</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/BUBBLE-Rap/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/BUBBLE-Rap/</id>
    <published>2016-03-28T22:18:23.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Social-based-Forwarding-in-Delay-Tolerant-Networks&quot;&gt;&lt;a href=&quot;#Social-based-Forwarding-in-Delay-Tolerant-Networks&quot; class=&quot;headerlink&quot; title=&quot;Social-based Forwarding in Delay Tolerant Networks&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Social-based_Forwarding_in_Delay_Tolerant_Networks&quot; title=&quot;Social-based Forwarding in Delay Tolerant Networks&quot;&gt;&lt;/a&gt;Social-based Forwarding in Delay Tolerant Networks&lt;/h1&gt;&lt;p&gt;Improved understanding of human mobility in terms of social structures, and to use these structures in the design of forwarding algorithms for Pocket Switched Networks(PSNs).&lt;/p&gt;
&lt;p&gt;For PSN, mobility is often unpredictable, and topology changes can be rapid, many MANET and some DTN routing algorithms forwarding by building and updating routing tables whenever mobility occurs might not be efficient.&lt;/p&gt;
&lt;p&gt; A PSN is formed by people, and social relationships may vary much more slowly than the topology.&lt;/p&gt;
&lt;p&gt;Two aspects: community and centrality.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Community&lt;/em&gt;: Cooperation and division.&lt;br&gt;&lt;em&gt;Centrality&lt;/em&gt;: Within a community, some people are more popular and interact with more people than others. They are called “hubs”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To-do&lt;/strong&gt;: Freeman [8] has defined several centrality metrics to measure the importance of a node in a network. &lt;/p&gt;
&lt;h2 id=&quot;Bubble-Rap-Forwarding&quot;&gt;&lt;a href=&quot;#Bubble-Rap-Forwarding&quot; class=&quot;headerlink&quot; title=&quot;Bubble Rap Forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#Bubble_Rap_Forwarding&quot; title=&quot;Bubble Rap Forwarding&quot;&gt;&lt;/a&gt;Bubble Rap Forwarding&lt;/h2&gt;&lt;p&gt;Two intuitions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;People have varying roles and popularities in society&lt;/li&gt;
&lt;li&gt;People form communities in their social lives&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Two assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Each node belongs to at least one community. Single node communities are allowed.&lt;/li&gt;
&lt;li&gt;Each node has a global ranking (i.e. global centrality) across the whole system, and also a local ranking within its local community. It may also belong to multiple communities and hence may have multiple local rankings.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Forwarding:&lt;br&gt;If a node has a message destined for another node, this node first bubbles the message up the hierarchical ranking tree using the global ranking, until it reaches a node which is in the same community as the destination node. Then the local ranking system is used instead of the global ranking, and the message continues to bubble up through the local ranking tree until the destination is reached or the message expires.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;begin:&amp;#10;&amp;#9;foreach EncounteredNode_i:&amp;#10;&amp;#9;&amp;#9;if(LabelOf(currentNode) == LabelOf(destination)):&amp;#10;&amp;#9;&amp;#9;&amp;#9;if(&amp;#10;&amp;#9;&amp;#9;&amp;#9;LabelOf(EncounteredNode_i) == LabelOf(destination)&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#38;&amp;#38;&amp;#10;&amp;#9;&amp;#9;&amp;#9;LocalRankOf(EncounteredNode_i &amp;#62; localRankOf(currentNode))&amp;#10;&amp;#9;&amp;#9;&amp;#9;):&amp;#10;&amp;#9;&amp;#9;&amp;#9;EncounteredNode_i.addMessageToBuffer(message)&amp;#10;&amp;#9;&amp;#9;else:&amp;#10;&amp;#9;&amp;#9;&amp;#9;if(&amp;#10;&amp;#9;&amp;#9;LabelOf(EncounteredNode_i) == LabelOf(destination)&amp;#10;&amp;#9;&amp;#9;||&amp;#10;&amp;#9;&amp;#9;GlobalRankOf(EncounteredNode_i &amp;#62; GlobalRankOf(currentNode)&amp;#10;&amp;#9;&amp;#9;&amp;#9;):&amp;#10;&amp;#9;&amp;#9;&amp;#9;&amp;#9;EncounteredNode_i.addMessageToBuffer(message)&amp;#10;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;To-do&lt;/strong&gt;: To calculate the individual centrality value for each node, we first carry out a large number of emulations of unlimited flooding with different uniformly distributed traffic patterns created using the &lt;em&gt;HaggleSim&lt;/em&gt; emulator [11]&lt;/p&gt;
&lt;p&gt;Community Detection:&lt;br&gt;K-CLIQUE:&lt;br&gt;Definition: a k-clique community is a union of all complete subgraphs of size k that can be reached from each otehr through a series of adjacent k-cliques, where two k-cliques are said to be adjacent if they share k-1 nodes.&lt;br&gt;WNA (Weighted Network Analysis):&lt;br&gt;For each community partitioning of a network, the corresponding modularity value $Q = \sum&lt;em&gt;{vw}[\frac{A&lt;/em&gt;{vw}}{2m} - \frac{k_v k_w}{(2m)^2}]\delta(c_v, c&lt;em&gt;w)$&lt;br&gt;$A&lt;/em&gt;{vw}$ is the value of the weight of the edge between vertices v and w, if such an edge exists and 0 otherwise;&lt;br&gt;$\delta(i, j)$ is 1 if $i == j$ and 0 otherwise;&lt;br&gt;$m = \frac{1}{2}\sum&lt;em&gt;{vw}A&lt;/em&gt;{vw}$;&lt;br&gt;$k_v$ is the degree of vertex v defined as $\sum&lt;em&gt;w A&lt;/em&gt;{vw}$ and $c_i$ denotes the community of which vertex i belongs to.&lt;/p&gt;
&lt;p&gt;Modularity: the strength of division of a network into modules. High Modularity -&amp;gt; dense connections -&amp;gt; less connections between communities&lt;/p&gt;
&lt;p&gt;Rank calculating:&lt;br&gt;RANK: using only centrality information&lt;br&gt;DEGREE: degree per unit-time slot&lt;br&gt;S-Window: the degree for previous unit-time slot such that when two nodes meet each other, they compare how many unique nodes they have met in the previous unit-time slot. (during encounter)&lt;br&gt;C-Window: calculate the average degree for every unit-time slot. (during encounter)&lt;/p&gt;
&lt;p&gt;Questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How does WNA work.2.  relationships between centrality and different rank calculating algorithms&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Social-based-Forwarding-in-Delay-Tolerant-Networks&quot;&gt;&lt;a href=&quot;#Social-based-Forwarding-in-Delay-Tolerant-Networks&quot; class=&quot;headerlink&quot;
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to MANET</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/Introduction-to-MANET/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/Introduction-to-MANET/</id>
    <published>2016-03-28T22:18:12.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;p&gt;transmission range:&lt;br&gt;the range in which a transmitter can pass its information for its best&lt;/p&gt;
&lt;p&gt;three kinds of networks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Almost connected networks:&lt;br&gt;— Relatively dense, exhibits partitions. Good percentage of pairs are connected end-to-end at any time. Traditional protocols could still diliver a part of the traffic, but unable to deliver any traffic between nodes that lie in different partitions. Opportunistic forwarding complementing path-based protocols.&lt;/li&gt;
&lt;li&gt;Sparse networks&lt;br&gt;— No large clusters exist. Nodes are isolated most of the time. Two nodes come into contact for a limited contact duration. A message must be routed predominantly by opportunistic forwarding. When a new candidate is encountered, the forwarding scheme must decide whether it should handover the message, forward a copy or do nothing. Available bandwidth per contact and/or node buffer space are the limiting factors as far as performance is concerned. Forwarding or scheduling techniques that aim to choose the right neighbor or combine packets for different neighbors will not offer much here.&lt;/li&gt;
&lt;li&gt;Clusters or Connectivity Islands&lt;br&gt;— Exhibits significant clustering and community structure, with well defined islands of (good) connectivity, and few or no contemporary oaths between clusters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Mobility:&lt;br&gt;It defines how a sequence of connectivity graph snapshots may look like, how the properties of subsequent snapshots depend on the current one.&lt;br&gt;Responsible for the amount of variability between different realizations of the network over time, but also for the ability to predict how the experienced realization will evolve and result in future contacts.&lt;/p&gt;
&lt;p&gt;Mobility Intensity:&lt;br&gt;The magnitude of the surface area it traverses in a given amount of time. The larger this area, the more the contact( and thus forwarding opportunities this node will have), and, the shorter duration of these occuring contacts as well.&lt;br&gt;Related to the absolute speed of the node and the frequency and duration of pauses.&lt;/p&gt;
&lt;p&gt;Mobility Locality:&lt;br&gt;Relates the mobility of a node to the total network area. A given node may move within only a small subset of locations and never or infrequently visit the rest of the network.&lt;br&gt;Recent models attempt to reproduce this behavior by assigning “home locations” to each node.&lt;br&gt;Mark: Markov chain&lt;/p&gt;
&lt;p&gt;Mobility Regularity:&lt;br&gt;The expectation of periodicity and pattern.&lt;/p&gt;
&lt;p&gt;Mobility Heterogeneity:&lt;br&gt;Nodes may exhibit significant diferences with other nodes’ patterns.&lt;/p&gt;
&lt;p&gt;Mobility Correlations:&lt;br&gt;While not all nodes in a given mobility scenario are expected to exhibit uniform mobility characteristics, subsets of nodes will be subject to higher correlations in their preferred locations and visiting patterns.&lt;/p&gt;
&lt;p&gt;Node Resources:&lt;br&gt;Bandwidth&lt;br&gt;Storage&lt;br&gt;Battery Lifetime&lt;br&gt;Heterogeneous Node Capabilities(*)&lt;/p&gt;
&lt;h3 id=&quot;11-3-Dealing-with-uncertainty&quot;&gt;&lt;a href=&quot;#11-3-Dealing-with-uncertainty&quot; class=&quot;headerlink&quot; title=&quot;11.3 Dealing with uncertainty&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#11-3_Dealing_with_uncertainty&quot; title=&quot;11.3 Dealing with uncertainty&quot;&gt;&lt;/a&gt;11.3 Dealing with uncertainty&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Model 1: Epidemic Routing&lt;/strong&gt;&lt;br&gt;Each node maintains a message vector indicating which messages the current node is storing in its buffer. When two nodes encounter, they first exchange and compare their message vectors. Then they exchange all messages not in common, so that, at the end of the contact, both nodes are storing exactly the same messages.&lt;br&gt;Positive: guaranteed to find the shortest space-time path&lt;br&gt;Negative: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;immense overhead per message. In a network of N nodes, the overhead of epidemic routing grows to infinity as $\frac{N}{\log N}$ unless some special measures are taken.&lt;/li&gt;
&lt;li&gt;If node buffer space and contact bandwidth are limited, epidemic routing is no longer optimal. Depending on the buffer management and scheduling policies, new messages may kick out old messages before the latter are delivered, leading to congestion collapse phenomena.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Revision 1: IMMUNE_TX and VACCINE recovery schemes:&lt;br&gt;After a destination receives a message, it propagates “anti-messages” to infected nodes and, respectively to all nodes. Since anti-messages have much smaller sizes(only message ID), the overhead is effectively reduced.&lt;/p&gt;
&lt;p&gt;Revision 2: Gossiping or Randomized Flooding:&lt;br&gt;Copy a message during a contact with a probability $p$ less than 1.&lt;br&gt;OR&lt;br&gt;ASllow each relay to copy the message to at most $k$ other nodes.&lt;br&gt;Requires a priori knowledge of global network parameters. In practice, all these schemes result in almost every node receiving a copy of each message.&lt;/p&gt;
&lt;p&gt;Revision 3: Limited-time Flooding:&lt;br&gt;Set a threshold on the epidemic routing time. Before the threshold timer expires, messages are spread using epidemic routing. When the timer expires, any node with the message may only transmit it directly to the destination.&lt;br&gt;Carefully selection of the timer is needed.&lt;br&gt;Very useful for analytical purposes.&lt;/p&gt;
&lt;p&gt;Revision 4: 2-hop scheme:&lt;br&gt;Allow only the source of a message to create and forward replicas.&lt;br&gt;In an uniform mobility environment, this scheme results in an average number of $\frac{N-1}{2}$ transmission per message. Yet only paths of at most 2 hops can be used, only for very local mobility scenarios.&lt;/p&gt;
&lt;p&gt;SLEF(Self-Limiting Epidemic Forwarding):&lt;br&gt;Reduce the number of hops each message is allowed to traverse, as a function of the perceived congestion.&lt;br&gt;An online mechanism to infer local congestion is necessary for SLEF to operate.&lt;br&gt;A sensible solution for applications like the broadcasting of location-related content, not suitable for generic, end-to-end unicast or multicast.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model 2: Controlled Replication Schemes&lt;/strong&gt;&lt;br&gt;Often referred to as &lt;em&gt;Spray and Wait&lt;/em&gt;&lt;br&gt;Ensure that each message is delivered with at most L transmissions, where $L\ll N$. Different flavors of spraying achieve this goal with different policies during the first “spraying” phase:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source Spraying: The source os a message alone may create additional copies and forward them to encountered relays.&lt;br&gt;Difference to 2-hop scheme: the source stops after having distributed $L-1$ copies or sooner, if the destination was among the first L-1 nodes encountered. Then, the source and the relays may only forward the message to the destination, which is the “wait” phase.&lt;/li&gt;
&lt;li&gt;Binary Spraying: To speed up the spraying phase, relays can be also allowed to spread copies further. To ensure that the total number of copies remains $\leq$ L, a quota system is implemented.&lt;blockquote&gt;
&lt;p&gt;(i)the source starts with one message copy and a quota of L allowed replications&lt;br&gt;(ii)when a node with a message copy and a quota $i&amp;gt;1$ encounters a relay without a copy, it forwards a message copy and half of the quota. Then they both have quota of $[i/2]$&lt;br&gt;(iii)a node with a copy and a quota of 1 may only forward the message to the destination&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Under IID(independent and identically distributed) mobility, binary spraying has the shortest delay among all quota0based spraying methods.&lt;/li&gt;
&lt;li&gt;Source spraying may be preferred in some scenarios where only the source can be &lt;em&gt;relied on&lt;/em&gt; to spread copies.&lt;/li&gt;
&lt;li&gt;If the mobility model is characterized by high mobility intensity and low locality, Spray and Wait can achieve similar delays to epidemic routing with almost an order of magnitude fewer transmissions.&lt;/li&gt;
&lt;li&gt;The performance increase, when using more and more replicas, obeys a &lt;em&gt;law of diminishing returns&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;One can analytically solve for the number of copies to achieve a desired performance compared to the optimal (epidemic under no resource constraints) — independent of the actual mobility model and independent of the size of the geographic area in which network nodes are moving.&lt;/li&gt;
&lt;li&gt;Performance of controlled replication algorithms can drop rapidly when nodes show strong location preference, correlated mobility, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;11-4-Capitalizing-on-structure-Utility-based-forwarding&quot;&gt;&lt;a href=&quot;#11-4-Capitalizing-on-structure-Utility-based-forwarding&quot; class=&quot;headerlink&quot; title=&quot;11.4 Capitalizing on structure: Utility-based forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#11-4_Capitalizing_on_structure_3A_Utility-based_forwarding&quot; title=&quot;11.4 Capitalizing on structure: Utility-based forwarding&quot;&gt;&lt;/a&gt;11.4 Capitalizing on structure: Utility-based forwarding&lt;/h3&gt;&lt;p&gt; A number of sophisticated opportunistic forwarding schemes are based on the following basic functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Collect and analyze some statistics about past contacts among (all or a subset of) nodes;&lt;/li&gt;
&lt;li&gt;Assign a utility for each node based on these statistics; this utility may be &lt;em&gt;destination-dependent&lt;/em&gt; or &lt;em&gt;destination-independent&lt;/em&gt; and aims at quantifying the ability of a candidate next hop to deliver the message probablistically closer to a destination.&lt;/li&gt;
&lt;li&gt;Perform a deterministic or probabilistic decision as a function of the current relay’s and the candidate relay’s utilities (and perhaps additional parameters).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Utility-based single-copy algorithms&lt;br&gt;When the node currently holding the message encounters another node with a higher utility than the current one, the message is handed over and no local copy is retained. (Exception: the source node)&lt;/p&gt;
&lt;p&gt;Contact-based Utility:&lt;br&gt;Mobility: key role as both an enabler and differentiator between nodes’ future contact probabilities. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model 1: Pair-based Contact Utilities&lt;/strong&gt;&lt;br&gt;individual node pair: an intended destination and a node being evaluated as candidate relay for that destination.&lt;br&gt;Properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Age of Last Encounter: the time elapsed since two nodes last encountered each other.&lt;br&gt;In DTNs, when nodes are heterogeneous in terms of their characteristics and capabilities, additional parameters should be used in combination with the age of last encounter.&lt;br&gt;If node mobility is relatively uniform, the age of last encounter only offers benefits in denser connectivity environments&lt;/li&gt;
&lt;li&gt;History of Past Encounters: keep track of a longer history of past contact and their statistics.&lt;br&gt;Derive different utilities: frequency &amp;amp; contact duration&lt;/li&gt;
&lt;li&gt;More Complex Pair Contact Predictors&lt;/li&gt;
&lt;li&gt;Pattern of Visited Location: People tend to follow a &lt;em&gt;movement pattern&lt;/em&gt; in their daily activities. &lt;em&gt;Location preference&lt;/em&gt; as well as the periodic nature of human mobility have been consistently demonstrated in a variety of real mobility traces.&lt;br&gt;Mobility patterns could help identify a &lt;em&gt;profile&lt;/em&gt; for a given node; nodes with a mobility profile matching or similar to the destination can be considered good candidate relays for messages to that destination.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maintenance and Overhead of Contact Statistics: Exponentially Weighted time Averages(EWMA) are more often used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Model 2: Contact Graph Utilities&lt;/strong&gt;&lt;br&gt;pairwise contact metrics might fail in cases, for example, when X rarely meets D, but X meets Y often and Y meets D often. Or, X meets many nodes in general and thus increasing the chances to meet D.&lt;/p&gt;
&lt;p&gt;Complex networks and social networks&lt;br&gt;Key steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create the contact graph out of a sequence of past (instantaneous) connectivity graphs&lt;/li&gt;
&lt;li&gt;Use contact graph properties to compose a utility function that efficiently identifies “good” next hops.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A sequence of binary matrices &lt;strong&gt;A(t)&lt;/strong&gt; corresponds to the connectivity as each time instant t.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Weighted graph: A scalar weight $w&lt;em&gt;{ij}$ is derived as a function of the **$A(t)&lt;/em&gt;{ij}$** for some past time window(eg, $[t_1, t&lt;em&gt;2]$).$w&lt;/em&gt;{ij} = f(A(t&lt;em&gt;{1})&lt;/em&gt;{ij}, A(t&lt;em&gt;{1}+1)&lt;/em&gt;{ij}, …, A(t&lt;em&gt;{2})&lt;/em&gt;{ij})$&lt;/li&gt;
&lt;li&gt;Unweighted graph: if the contact graph is unweighted, then a link may either exist or not exist. This could be achieved for example by introducing a cutoff threshold for weights: if the link weight $w_{ij}$ is below this value, then it is removed from the contact graph.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some key properties that seem to underlie many mobility scenarios for contact graphs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Community structure: Contact graphs seem to exhibit considerable community structure with subsets of nodes well-connected to each other, with fewer or weaker links between subsets.&lt;/li&gt;
&lt;li&gt;Small world: Contact graphs exhibit small world properties, namely very short paths between any two nodes usually exist. However, it does not imply that these paths can be easily found.&lt;/li&gt;
&lt;li&gt;Skewed degree distribution: Contact graph weight distributions and node degree distributions exhibit considerable heterogeneity.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Centrality-based Utility:&lt;br&gt;The &lt;em&gt;betweeness centrality&lt;/em&gt; of a node $i$ is defined as the number of shortest paths between any network nodes going through node $i$.  Nodes with high betweeness centrality can serve as “bridges” between communities relaying the message from the community the source lies in to the community the destination lies in.&lt;br&gt;Cannot be easily calculated since it requires global network information&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;degree centrality&lt;/em&gt; is the degree of the node in the contact graph (or the sum of link weights, in the weighted case).&lt;br&gt;Essentially related to the amount of mobility of a given node and the total rate of meetings of that node with all other network nodes.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Similarity-based Utility&lt;/em&gt; is the similarity between two nodes. Two nodes are &lt;em&gt;similar&lt;/em&gt; if they have a lot of common neighbors in the contact graph. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Complete Social Network Analysis-based Schemes&lt;/em&gt;&lt;br&gt;SimBet uses a per node utility that takes into account both the similarity of a given relay $i$ with the intended destination $d$ (denoted as $Sim_i(d)$ here), as well as the ego-centrality of the same relay, $Bet_i$&lt;br&gt;$U_i(d) = \alpha Sim_i(d) + \beta Bet_i$&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Probabilistic Path-based Utilities&lt;/em&gt;&lt;br&gt;node $i$ may be a good next hop because it is in the beginning of a space-time path that has a high chance of realization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Non-contact-based Utility&lt;/strong&gt;&lt;br&gt;Forward or replicate a message to a relay based upon the available resources in order to maximize the likelihood of message delivery, when two nodes meet. In some examples, utilities are defined based on the total buffer occupancy permessage. Messages then are ordered with respect to their utilities, keeping in view the goal of optimizing specific quantities, which allows computation of desired performance metrics such as worst-case delivery delay and packet delivery ratio. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Social Relations&lt;/em&gt;&lt;br&gt;People who are socially-related to each other are expected to interact more often with each other.&lt;/p&gt;
&lt;h3 id=&quot;11-5-Hybrid-solutions-Combining-Redundancy-and-Utility&quot;&gt;&lt;a href=&quot;#11-5-Hybrid-solutions-Combining-Redundancy-and-Utility&quot; class=&quot;headerlink&quot; title=&quot;11.5 Hybrid solutions: Combining Redundancy and Utility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#11-5_Hybrid_solutions_3A_Combining_Redundancy_and_Utility&quot; title=&quot;11.5 Hybrid solutions: Combining Redundancy and Utility&quot;&gt;&lt;/a&gt;11.5 Hybrid solutions: Combining Redundancy and Utility&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Utility-based Flooding&lt;/strong&gt;&lt;br&gt;Pass the value to another node if it satisfies the utility criterion:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Absolute utility criterion: $U&lt;em&gt;j(d) &amp;gt; U&lt;/em&gt;{thresh}$&lt;/li&gt;
&lt;li&gt;Relative utility criterion: $U_j(d) &amp;gt; U&lt;em&gt;i(d) + U&lt;/em&gt;{thresh}$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eg. PRoPHET is a utility-based flooding scheme, and it has the following properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it increases when i meets d&lt;/li&gt;
&lt;li&gt;it decreases with time, when i is not in contact with d&lt;/li&gt;
&lt;li&gt;it increases when i meets another node j, with a non-zero utility for d&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Spray and Utility-based Spraying&lt;/strong&gt;&lt;br&gt;A source could spray the limited budget of copies quickly after message creation, and then allow each copy to be further forwarded(hand over, not copied) using an appropriate utility-based scheme.&lt;br&gt;&lt;em&gt;Spray and Focus&lt;/em&gt; performs binary spraying of L copies, as in the &lt;em&gt;Spray and Wait&lt;/em&gt; case. However, after the replication quota for a relay node reaches 1, it can still hand over its copy to another, better relay, if it encounters one. The utility is a simple pairwise contact utility, similar to the one in PRoPHET.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Smart Replication&lt;/strong&gt;&lt;br&gt;Use explicit “labels” or a degree centrality estimate as the utility. Then, binary or source spraying is employed, with copies forwarded only to relays that either have a higher utility or have a high enough utility.&lt;/p&gt;
&lt;p&gt;Memoryless&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;transmission range:&lt;br&gt;the range in which a transmitter can pass its information for its best&lt;/p&gt;
&lt;p&gt;three kinds of networks:&lt;/p&gt;
&lt;ol&gt;
&lt;l
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>随建即连网络</title>
    <link href="http://qianmengchen.github.io/blog/2016/03/28/%E9%9A%8F%E5%BB%BA%E5%8D%B3%E8%BF%9E%E7%BD%91%E7%BB%9C/"/>
    <id>http://qianmengchen.github.io/blog/2016/03/28/随建即连网络/</id>
    <published>2016-03-28T22:18:07.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;定义与名词解释&quot;&gt;&lt;a href=&quot;#定义与名词解释&quot; class=&quot;headerlink&quot; title=&quot;定义与名词解释&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u5B9A_u4E49_u4E0E_u540D_u8BCD_u89E3_u91CA&quot; title=&quot;定义与名词解释&quot;&gt;&lt;/a&gt;定义与名词解释&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;随建即连网络（Mobile Ad-Hoc Network, abbr. MANET）是无线随意网络（Wireless Ad-Hoc Network, abbr. WANET）的一种。它是一种以移动设备，通过无线链接，自我配置所形成的网络。在MANET之中的每个移动设备都可以自由移动，随时改变无线链接。每个移动设备节点都必须协助转发网络数据包，即使这个数据包是跟这个设备无关的。要创建一个 MANET，最根本的挑战在于让每个移动设备都能够得到足够的信息，以协助保持网络信息的流通。&lt;br&gt;–引自&lt;a href=&quot;https://zh.wikipedia.org/wiki/隨建即連網路&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;网络可以分为以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Almost Connected Networks：顾名思义，相对连接比较密集的网络。大部分的pair都是相连的。传统传输协议仍然是主要的传输方法，但是因为网络中存在partition，需要用opportunistic forwarding来补充传统的path-based协议。&lt;/li&gt;
&lt;li&gt;Sparse Networks：不存在大规模cluster，节点在大部分时间都是相互隔绝的，偶尔两节点相遇时进行信息传递，完全依赖于opportunistic forwarding。&lt;/li&gt;
&lt;li&gt;Clusters or Connectivity Islands：呈现以不同cluster组成的结构，cluster内部连接紧密，不同cluster之间连接稀疏。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;网络有以下性质：&lt;br&gt;Mobility：基于某时刻网络的“快照”，网络的性质会如何变化。&lt;br&gt;Mobility Intensity：一定时间内信息传播的面积大小，面积越大，该节点相遇的节点更多，相遇时间越短。&lt;br&gt;Mobility Locality：一个节点可能会局限于一部分区域移动而很少光顾其他区域。&lt;br&gt;Mobility Regularity：出现周期性行为的期望。&lt;br&gt;Mobility Heterogeneity：每个节点的模式都非常不同。&lt;br&gt;Mobility Correlations：一部分节点呈现出相似的活动模式与地点，较高的关联度。&lt;/p&gt;
&lt;h2 id=&quot;几种常见的opportunistic-forwarding策略&quot;&gt;&lt;a href=&quot;#几种常见的opportunistic-forwarding策略&quot; class=&quot;headerlink&quot; title=&quot;几种常见的opportunistic forwarding策略&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u51E0_u79CD_u5E38_u89C1_u7684opportunistic_forwarding_u7B56_u7565&quot; title=&quot;几种常见的opportunistic forwarding策略&quot;&gt;&lt;/a&gt;几种常见的opportunistic forwarding策略&lt;/h2&gt;&lt;h3 id=&quot;策略一：Epidemic-Routing及其优化版本&quot;&gt;&lt;a href=&quot;#策略一：Epidemic-Routing及其优化版本&quot; class=&quot;headerlink&quot; title=&quot;策略一：Epidemic Routing及其优化版本&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u7B56_u7565_u4E00_uFF1AEpidemic_Routing_u53CA_u5176_u4F18_u5316_u7248_u672C&quot; title=&quot;策略一：Epidemic Routing及其优化版本&quot;&gt;&lt;/a&gt;策略一：Epidemic Routing及其优化版本&lt;/h3&gt;&lt;p&gt;Epidemic Routing 基本策略：&lt;br&gt;每个节点储存其消息向量（message vector）来记录当下它记录了哪些信息。当两个节点相遇时，先比较两者的消息向量，然后交换非公共的消息内容。每次相遇完成后，两个节点都将持有完全相同的消息。&lt;br&gt;优点：能够保证找到最短的时空传输路径。&lt;br&gt;缺点：&lt;br&gt;    冗余（overhead，不知道怎么翻译）过高。epidemic routing的overhead可以以$\frac{N}{log_N}$增长至无限。&lt;br&gt;    如果节点的储存空间有限，epidemic routing不太现实。当储存空间不足时，新信息会将老信息在其传达完毕前踢出，导致congestion collapse。&lt;/p&gt;
&lt;p&gt;改版一：IMMUNE_TX and VACCINE recovery schemes&lt;br&gt;在目标收到信息后，发出一个“抵消信息”来进行传播，然后消去网络中所有该信息的副本。因为抵消信息只需要储存信息的ID，其大小会小很多，因此可以很有效地减少overhead。&lt;/p&gt;
&lt;p&gt;改版二：Gossiping or Randomized Flooding&lt;br&gt;在相遇时，以概率p来进行消息拷贝&lt;br&gt;或者&lt;br&gt;允许每个节点对该消息发放k份拷贝&lt;/p&gt;
&lt;p&gt;改版三：Limited-time Flooding&lt;br&gt;设置一个epidemic routing时间门槛。在时间消耗完之前，先进行epidemic routing。之后停止所有拷贝，每个节点都只有在遇到目的地时才进行传递。&lt;/p&gt;
&lt;p&gt;改版四：2-hop scheme&lt;br&gt;只有消息的源头可以创建拷贝，其余拷贝只有在遇到目的地时才传递消息。消息从起点到终点只进行两次跳跃（2-hop）。平均下来，该方法每个消息传递\frac{N-1}{2}次。&lt;/p&gt;
&lt;p&gt;改版五：SLEF(Self-Limiting Epidemic Forwarding)&lt;br&gt; 随着congestion的升高，减少每个消息允许的跳跃次数(number of hops)。需要一个事实检测congestion的机制。&lt;/p&gt;
&lt;h3 id=&quot;策略二：Controlled-Replication-Schemes-Spray-and-Wait&quot;&gt;&lt;a href=&quot;#策略二：Controlled-Replication-Schemes-Spray-and-Wait&quot; class=&quot;headerlink&quot; title=&quot;策略二：Controlled Replication Schemes(Spray and Wait)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u7B56_u7565_u4E8C_uFF1AControlled_Replication_Schemes_28Spray_and_Wait_29&quot; title=&quot;策略二：Controlled Replication Schemes(Spray and Wait)&quot;&gt;&lt;/a&gt;策略二：Controlled Replication Schemes(Spray and Wait)&lt;/h3&gt;&lt;p&gt;Spray and Wait基本策略：&lt;br&gt;确保每条消息只被复制最多L次，不同的模型用不同的方法来达到这个效果。在Spray阶段，一般有如下两种传递方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source Spraying：只有消息的源头可以进行消息的复制传递，在进行L－1次复制之后，不再创建新的备份，只有在遇到目的地时才进行消息传递。&lt;/li&gt;
&lt;li&gt;Binary Spraying：每一个节点在遇到一个不存有该消息的节点时，将自己拷贝数量的一半传递给对方，然后让对方以同样的方式进行传递。当拷贝数量为1时，除非遇到目的地，停止传递。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通常情况下Binary Spraying是更佳策略。Source Spraying一般用于消息依赖于源头的情况下。&lt;/li&gt;
&lt;li&gt;如果网络有高mobility intensity和低的locality，Spray and Wait能达到和epidemic一样的传递时间而低至少一个数量级的传递数。&lt;/li&gt;
&lt;li&gt;拷贝数上限L往往是可求解的。&lt;/li&gt;
&lt;li&gt;高locality网络中，该策略的效率急剧降低。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;策略三：Utility-based-forwarding&quot;&gt;&lt;a href=&quot;#策略三：Utility-based-forwarding&quot; class=&quot;headerlink&quot; title=&quot;策略三：Utility-based forwarding&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u7B56_u7565_u4E09_uFF1AUtility-based_forwarding&quot; title=&quot;策略三：Utility-based forwarding&quot;&gt;&lt;/a&gt;策略三：Utility-based forwarding&lt;/h3&gt;&lt;p&gt;该模型基于以下几个思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;搜集并分析之前的相遇数据。&lt;/li&gt;
&lt;li&gt;给每一个节点计算一个utility值，来表示该节点作为使消息离终点更近的传递者的能力。&lt;/li&gt;
&lt;li&gt;在进行传递时，依据节点的utility采取不同的行为。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模式一：Utility-based single-copy algorithms&lt;br&gt;当一个节点遇到一个比自己utility高的节点时，将消息传递出去，自己不留备份。&lt;/p&gt;
&lt;p&gt;模式二：Contact-based Utility&lt;br&gt;Mobility是区分一个节点遇到之后节点的关键。&lt;/p&gt;
&lt;h4 id=&quot;模型一：Pair-based-Contact-Utilities&quot;&gt;&lt;a href=&quot;#模型一：Pair-based-Contact-Utilities&quot; class=&quot;headerlink&quot; title=&quot;模型一：Pair-based Contact Utilities&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u6A21_u578B_u4E00_uFF1APair-based_Contact_Utilities&quot; title=&quot;模型一：Pair-based Contact Utilities&quot;&gt;&lt;/a&gt;模型一：Pair-based Contact Utilities&lt;/h4&gt;&lt;p&gt;以一个节点对作为单位，计算该两个节点相遇的Utility&lt;br&gt;考虑以下信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;距离上次相遇的时间&lt;/li&gt;
&lt;li&gt;过去的相遇节点&lt;/li&gt;
&lt;li&gt;一些其他的预测信息&lt;/li&gt;
&lt;li&gt;该节点的活动规律&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;模型二：Contact-Graph-Utilities&quot;&gt;&lt;a href=&quot;#模型二：Contact-Graph-Utilities&quot; class=&quot;headerlink&quot; title=&quot;模型二：Contact Graph Utilities&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u6A21_u578B_u4E8C_uFF1AContact_Graph_Utilities&quot; title=&quot;模型二：Contact Graph Utilities&quot;&gt;&lt;/a&gt;模型二：Contact Graph Utilities&lt;/h4&gt;&lt;p&gt;关键步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据过去的节点的连接图来创建联络图&lt;/li&gt;
&lt;li&gt;根据联络图来推断utility&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;用一个二维数组 &lt;strong&gt;A(t)&lt;/strong&gt;来存储在时刻t联络图的连接状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有权图：用一个标量函数来表示对于某时间段$[t_1, t&lt;em&gt;2]$点i与j之间的连接状态&lt;br&gt;$w&lt;/em&gt;{ij} = f(A(t&lt;em&gt;{1})&lt;/em&gt;{ij}, A(t&lt;em&gt;{1}+1)&lt;/em&gt;{ij}, …, A(t&lt;em&gt;{2})&lt;/em&gt;{ij})$&lt;/li&gt;
&lt;li&gt;无权图：一方面，图中可以只存储连接的连与断（0或1）；另一方面，可以给$w_{ij}$设一个阀值，超过即为真。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于contact graph，有一些性质很关键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Community Structure&lt;/li&gt;
&lt;li&gt;Small World：通常两个点之间存在十分短的路径，但是这并不代表这条路径能被很容易地找到。&lt;/li&gt;
&lt;li&gt;Skewed degree distribution：有很强的heterogeneity。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于utility的计算，一般有以下几种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Centrality-based Utilities：&lt;br&gt;betweeness centrality被定义为穿过节点i的最短路径数量。但是此定义下的centrality难以计算，因为需要网络全局的数据。此外有计算简便的degree centrality，即该节点连接的节点数目。&lt;/li&gt;
&lt;li&gt;The Similarity-based Utility：&lt;/li&gt;
&lt;li&gt;Complete Social Network Analysis-based Schemes:&lt;br&gt;同时考虑了similarity（$Sim_i(d)$）和ego－centrality（$Bet_i$）&lt;br&gt;$U_i(d) = \alpha Sim_i(d) + \beta Bet_i$&lt;/li&gt;
&lt;li&gt;Probabilistic Path-based Utilities&lt;br&gt;某个点适合做跳跃点，因为它在一条高实现概率的通路的起点。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;策略四：混合Redundancy和Utility&quot;&gt;&lt;a href=&quot;#策略四：混合Redundancy和Utility&quot; class=&quot;headerlink&quot; title=&quot;策略四：混合Redundancy和Utility&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u7B56_u7565_u56DB_uFF1A_u6DF7_u5408Redundancy_u548CUtility&quot; title=&quot;策略四：混合Redundancy和Utility&quot;&gt;&lt;/a&gt;策略四：混合Redundancy和Utility&lt;/h3&gt;&lt;p&gt;除了以上提到的几种基本策略，许多人也会想到将上述策略进行混合，取长补短，来达到更高效率。&lt;/p&gt;
&lt;p&gt;举例一：Utility-based Flooding&lt;br&gt;只在相遇的节点达到一定Utility时才进行传递，又分为两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;绝对Utility门槛：$U&lt;em&gt;j(d) &amp;gt; U&lt;/em&gt;{thresh}$&lt;/li&gt;
&lt;li&gt;相对Utility门槛：$U_j(d) &amp;gt; U&lt;em&gt;i(d) + U&lt;/em&gt;{thresh}$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PRoPHET即是使用了Utility－based Flooding，它遵循下述规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当某节点遇到目的地时，Utility增加。&lt;/li&gt;
&lt;li&gt;未与目的地相遇时，Utility随时间减少。&lt;/li&gt;
&lt;li&gt;当遇到另一个Utility不为零的节点时，Utility增加&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例二：Spray and Utility-based Spraying&lt;br&gt;Spray的初期阶段时，先快速发放，然后再Wait阶段不进行wait，而是每次遇到utility比自己高的节点都将信息传递出去（自己不留拷贝）。&lt;br&gt;&lt;em&gt;Spray and Focus&lt;/em&gt;是其中一种重要的实现，该方法先进行binary spray，然后每当遇到比自己Utility高的节点都将消息传递出去。utility通过类似于PRoPHET的方式进行计算。&lt;/p&gt;
&lt;p&gt;举例三：Smart Replication&lt;br&gt;把&lt;em&gt;Spray and Focus&lt;/em&gt;的utility算法换成degree centrality&lt;/p&gt;
&lt;p&gt;参考文献：&lt;em&gt;MOBILE AD HOC NETWORKING: THE CUTTING EDGE DIRECTIONS&lt;/em&gt; Stefano Basagni, Marco Conti, Silvia Giordano and Ivan Stojmenovic&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义与名词解释&quot;&gt;&lt;a href=&quot;#定义与名词解释&quot; class=&quot;headerlink&quot; title=&quot;定义与名词解释&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#u5B9A_u4E49_u4E0E_u540D_u8BCD_u89E3_u91CA&quot; title=&quot;定义与名词
    
    </summary>
    
    
      <category term="Research Notes" scheme="http://qianmengchen.github.io/blog/tags/Research-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://qianmengchen.github.io/blog/2016/01/29/Hello-World-0/"/>
    <id>http://qianmengchen.github.io/blog/2016/01/29/Hello-World-0/</id>
    <published>2016-01-29T11:41:01.000Z</published>
    <updated>2016-04-05T05:07:15.000Z</updated>
    
    <content type="html">&lt;p&gt;没错这只是一个Hello World。&lt;/p&gt;
&lt;p&gt;目前来说这个博客打算用来放自己零零散散学的一些东西，没有什么值得看的。文章一般情况下会先写中文版，写不写英文版看心情＝ ＝。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;没错这只是一个Hello World。&lt;/p&gt;
&lt;p&gt;目前来说这个博客打算用来放自己零零散散学的一些东西，没有什么值得看的。文章一般情况下会先写中文版，写不写英文版看心情＝ ＝。&lt;/p&gt;

    
    </summary>
    
    
      <category term="Other" scheme="http://qianmengchen.github.io/blog/tags/Other/"/>
    
  </entry>
  
</feed>
